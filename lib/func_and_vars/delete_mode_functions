#!/bin/bash

# Functions for delete mode
# <start>
delete_link() {
	if [[ -f "$CONFIG_FILE_location" ]]; then
		if [[ -L "$CONFIG_FILE_location" ]]; then echo -e "${GREEN}[+] ${BLUE}Removing configuration 'link file'${WHITE}"

			rm "$CONFIG_FILE_location"
		else
			echo -e "${YELLOW}[-] ${BLUE}This file at configuration location is not a link!${WHITE}"
		fi
	else
		echo -e "${YELLOW}[-] ${BLUE}Configuration 'link file' doesn't exist!${WHITE}"
	fi
}

put_back_config_file() {
	if [[ -f "$new_CONFIG_FILE_LOCATION" ]]; then
		echo -e "${GREEN}[+] ${BLUE}Putting configuration file back to it's original location from github folder${WHITE}"

		mv "$new_CONFIG_FILE_LOCATION" "$CONFIG_FILE_location"
	else
		echo -e "${YELLOW}[-] ${BLUE}Configuration file doesn't exist in the github folder!${WHITE}"
	fi
}

delete_git_folder_and_repo() {
	if [[ -d "$GIT_MAIN_FOLDER_location" ]]; then
		cd "$GIT_MAIN_FOLDER_location" || exit

		FILE_COUNT=$(find . ! \( -name . -o -name .. -o -name .git -o -name README.md -o -name .gsync_init -o -name .gitignore \) -maxdepth 1 2>/dev/null | grep -e "^" -c)

		## updating repo
		echo -e "${GREEN}[+] ${BLUE}Updating the remote repo${WHITE}"
		git add "$CONFIG_FILE"
		git commit -m "Removing $CONFIG_FILE via gsync by @proffapt"
		git push origin

		## for further detecting the number of branches
		echo -e "${GREEN}[+] ${BLUE}Updating remote branch list${WHITE}"
		git pull origin
		BRANCH_COUNT=$(git branch -r | grep -e "^" -c)

		if [[ $FILE_COUNT == "0" ]] && [[ $BRANCH_COUNT == "1" ]]; then
			echo -e "${GREEN}[+] ${BLUE}Deleting the github repository containing configuration file${WHITE}"
			gh repo delete --confirm

			cd "$CURRENT_LOCATION" || exit

			echo -e "${GREEN}[+] ${BLUE}Deleting the github folder containing configuration file from your local machine${WHITE}"
			rm -rf "$GIT_MAIN_FOLDER_location"
		elif [[ $FILE_COUNT != "0" ]] && [[ $BRANCH_COUNT == "1" ]]; then
			echo -e "${CYAN}[~] ${BLUE}Detected more than one configuration file in the github folder${WHITE}"
			echo -e "${YELLOW}[-] ${BLUE}Skipping deletion of github repo and the folder${WHITE}"

			cd "$CURRENT_LOCATION" || exit
		elif [[ $FILE_COUNT == "0" ]] && [[ $BRANCH_COUNT != "1" ]]; then
			echo -e "${CYAN}[~] ${BLUE}Detected more than one branch in the github repo${WHITE}"
			echo -e "${YELLOW}[-] ${BLUE}Skipping deletion of github repo${WHITE}"

			echo -e "${GREEN}[+] ${BLUE}Deleting the branch containing the config file${WHITE}"
			DEL_BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
			git push --delete origin "$DEL_BRANCH"

			cd "$CURRENT_LOCATION" || exit

			echo -e "${GREEN}[+] ${BLUE}Deleting the github folder containing configuration file from your local machine${WHITE}"
			rm -rf "$GIT_MAIN_FOLDER_location"
		else
			echo -e "${CYAN}[~] ${BLUE}Detected more than one branch github repo${WHITE}"
			echo -e "${CYAN}[~] ${BLUE}Detected more than one configuration file in the github folder${WHITE}"

			cd "$CURRENT_LOCATION" || exit
 		fi
	else
		echo -e "${YELLOW}[-] ${BLUE}Github folder supposed to be containing configuration file doesn't exist!${WHITE}"
	fi
}

deconfigure_syncsript(){
	if [[ $FILE_COUNT == 0 ]]; then ## if there are no other file in the github folder: remove it's entry
		## adding this check just to make the code robust in terms of functioning
		ENTRY_TEST=$(grep "$STARTUP_SCRIPT" -ce "$GIT_MAIN_FOLDER_location")

		if [[ $ENTRY_TEST != 0 ]]; then
			echo -e "${GREEN}[+] ${BLUE}Deleting folder's entry${WHITE}"

			if [[ $KERNEL == "Darwin" ]]; then
				## remove the entry of that github folder from startup.sh
				## command specific to BSD sed
				sed -i '' "\:$GIT_MAIN_FOLDER_location:d" "$STARTUP_SCRIPT"
			else
				## remove the entry of that github folder from startup.sh
				## command specific to GNU sed
				sed -i "\:$GIT_MAIN_FOLDER_location:d" "$STARTUP_SCRIPT"

				## copying the modified file without entry of that github folder
				cp "$STARTUP_SCRIPT" /etc/profile.d/gsync-startup.sh
			fi

			## killing the running process 
			PROCESS_COUNT=$(ps -ef | grep "$SYNC_SCRIPT_location -d $GIT_MAIN_FOLDER_location" | awk '{print $2}' | grep "^" -c)
			for ((i=$PROCESS_COUNT; i>1; i--))
			do
				PID=$(ps -ef | grep "$SYNC_SCRIPT_location -d $GIT_MAIN_FOLDER_location" | awk 'NR==1{print $2}')
				echo -e "${CYAN}>> ${WHITE}Terminating previously running instance(pid=$PID) of this entry"
				kill "$PID"
				## Appending the termination message into the logs
				echo "[$(tput setaf 3)$(date)$(tput setaf 7)] [$(tput setaf 1)KILL$(tput setaf 7)] Terminated process runnning on PID=$(tput setaf 6)$PID$(tput setaf 7)" >> "$SCRIPT_LOCATION"/lib/logs/"$GIT_MAIN_FOLDER".log
			done
			if [[ $PROCESS_COUNT == 1 ]]; then
				echo -e "${YELLOW}[-] ${BLUE}No running instance found for this entry${WHITE}"
			fi
		else
			echo -e "${YELLOW}[-] ${BLUE}Entry for the specified github folder already doesn't exist${WHITE}"
		fi
	else ## if there are other configuration files then skip the process of deletion of entry
		echo -e "${YELLOW}[-] ${BLUE}Skipping deletion of this folder's entry${WHITE}"
	fi

	ENTRY_COUNT=$(grep "$STARTUP_SCRIPT" -ce "-d")

	if [[ $ENTRY_COUNT == 0 ]]; then ## if it has no other entry than the deleted one
		echo -e "${CYAN}[~] ${BLUE}No other entries detected${WHITE}"
		echo -e "${GREEN}[+] ${BLUE}Removing startup script${WHITE}"

		if [[ $KERNEL == "Darwin" ]]; then
			## remove startup.sh and com.gsync-startup.plist
			rm -f "$STARTUP_SCRIPT"
			rm -f ~/Library/LaunchAgents/com.gsync-startup.plist
		else
			## remove startup.sh and gsync-startup.sh
			rm -f "$STARTUP_SCRIPT"
			rm -f /etc/profile.d/gsync-startup.sh
		fi
	else ## if the startup.sh has more than 1(which is deleted now) entry
		echo -e "${CYAN}[~] ${BLUE}Detected other entries${WHITE}"
		echo -e "${YELLOW}[-] ${BLUE}Skipping removal of startup script${WHITE}"
	fi
}
