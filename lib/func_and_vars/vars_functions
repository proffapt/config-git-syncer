#!/bin/bash

# Utility functions
# <start>
manipulate_and_store_variables() {
	## Script execution location and script presence location:
	CURRENT_LOCATION=$(pwd)
	KERNEL=$(uname -s)

	## Extracting names of files and folders from given location :
	SYNC_SCRIPT_location="$SCRIPT_LOCATION/lib/syncscript"
	defaults_LOCATION="$SCRIPT_LOCATION/.defaults"
	MODE="${script_args[@]}"
	git_SYNC_SCRIPT_folder="$SYNC_SCRIPT_folder/.git" ## We got without a '/'
	CONFIG_FILE="${CONFIG_FILE_location##*/}"
	STARTUP_SCRIPT="$SCRIPT_LOCATION/lib/startup.sh"

	## Sourcing .defaults file if -g arg is not given and it's not in default mode
	if [[ $GIT_MAIN_FOLDER_location == "" ]] && [[ $MODE != "default" ]] && [[ $MODE != "logs" ]] && [[ $MODE != "clear-logs" ]] && [[ $MODE != "start" ]] && [[ $MODE != "stop" ]] && [[ $MODE != "restart" ]] && [[ $MODE != "status" ]] && [[ $MODE != "enable" ]] && [[ $MODE != "disable" ]]; then
		if [[ -f "$defaults_LOCATION" ]]; then
			echo -e "${GREEN}[+] ${BLUE}Sourcing .defaults file${WHITE}"

			source "$defaults_LOCATION"
		else
			banner

			echo -e "${RED}ERROR: ${GREEN}-g${BLUE} arg not specified, neither .defaults file exists${WHITE}"
			_EXIT_
		fi
	fi

	## Handling with and without '/' input to -g arg
	check_SLASH="${GIT_MAIN_FOLDER_location##*/}"
	if [[ $check_SLASH == "" ]]; then
		## We got with a '/'
		## Thus dropping that '/' from the end
		GIT_MAIN_FOLDER_location="${GIT_MAIN_FOLDER_location%?}"
	fi
	new_CONFIG_FILE_LOCATION="$GIT_MAIN_FOLDER_location/$CONFIG_FILE"
	GSYNC_INIT="$GIT_MAIN_FOLDER_location/.gsync_init"
	GIT_MAIN_FOLDER="${GIT_MAIN_FOLDER_location##*/}"
}
# </start>
