#!/bin/bash

# Utility functions
# <start>
shellcheck() {
	# Storing the path to shell config file in SHELL_file variable
	if [[ $SHELL_TYPE == fish ]]; then
		SHELL_file=~/.config/fish/config.fish
	elif [[ $SHELL_TYPE == bash ]]; then
		SHELL_file=~/.bashrc
	elif [[ $SHELL_TYPE == zsh ]]; then
		SHELL_file=~/.zshrc
	elif [[ $SHELL_TYPE == tcsh ]]; then
		SHELL_file=~/.tcshrc
	elif [[ $SHELL_TYPE == sh ]]; then
		SHELL_file=~/.profile
	elif [[ $SHELL_TYPE == csh ]]; then
		SHELL_file=~/.cshrc
	elif [[ $SHELL_TYPE == ksh ]]; then
		SHELL_file=~/.kshrc
	else
		echo -e "${RED}ERROR${WHITE}: You are using unsupported shell type! - '${ORANGE}$SHELL_TYPE${WHITE}'"
		_EXIT_
	fi
}

manipulate_and_store_variables() {
	## Script execution location and script presence location:
	CURRENT_LOCATION=$(pwd)

	## Extracting names of files and folders from given location :
	SYNC_SCRIPT_location="$SCRIPT_LOCATION/lib/syncscript"
	defaults_LOCATION="$SCRIPT_LOCATION/.defaults"
	MODE="${script_args[@]}"
	SHELL_LOCATION=$(echo "$SHELL")
	SHELL_TYPE="${SHELL_LOCATION##*/}"
	SYNC_SCRIPT="${SYNC_SCRIPT_location##*/}"
	SYNC_SCRIPT_folder="${SYNC_SCRIPT_location%/*}"
	git_SYNC_SCRIPT_folder="$SYNC_SCRIPT_folder/.git" ## We got without a '/'
	CONFIG_FILE="${CONFIG_FILE_location##*/}"

	## Sourcing .defaults file if -g arg is not given and it's not in default mode
	if [[ "$GIT_MAIN_FOLDER_location" == "" ]] && [[ "$MODE" != default ]]; then
		if [[ -f "$defaults_LOCATION" ]]; then
			echo -e "${GREEN}[+] ${BLUE}Sourcing .defaults file${WHITE}"

			source "$defaults_LOCATION"
		else
			banner

			echo -e "${RED}ERROR: ${GREEN}-g${BLUE} arg not specified, neither .defaults file exists${WHITE}"
			_EXIT_
		fi
	fi

	execute_syncscript="$SYNC_SCRIPT_location -c $CONFIG_FILE -g $GIT_MAIN_FOLDER_location"

	## Handling with and without '/' input to -g arg
	check_SLASH="${GIT_MAIN_FOLDER_location##*/}"
	if [[ $check_SLASH == "" ]]; then
		## We got with a '/'
		new_CONFIG_FILE_LOCATION="$GIT_MAIN_FOLDER_location$CONFIG_FILE"
	else
		## We got without '/'
		new_CONFIG_FILE_LOCATION="$GIT_MAIN_FOLDER_location/$CONFIG_FILE"
	fi
}
# </start>
