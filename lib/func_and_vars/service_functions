#!/bin/bash

## service management functions
#<start>
service_status() {
	## checking whether the startup services are enabled or disabled on login
	STARTUP_STATUS="${RED}DISABLED${WHITE}"
	if [[ $KERNEL == "Darwin" ]]; then
		if [[ -f ~/Library/LaunchAgents/com.gsync-startup.plist ]]; then
			STARTUP_STATUS="${GREEN}ENABLED${WHITE}"
		fi
	else
		if [[ -f /etc/profile.d/gsync-startup.sh ]]; then
			STARTUP_STATUS="${GREEN}ENABLED${WHITE}"
		fi
	fi
	SERVICE_COUNT=$(ps -ef | grep "$SYNC_SCRIPT_location" | awk '{print $2}' | grep "^" -c)
	_=$(( SERVICE_COUNT = SERVICE_COUNT - 1 ))
	ENTRY_COUNT=$(grep "$SERVICES_SCRIPT" -ce "-d")
	echo
	if [[ $SERVICE_COUNT == 0 ]]; then
		echo -e " STATUS: [${RED}NOT RUNNING${WHITE}]  STARTUP SERVICE: [$STARTUP_STATUS]
		"
		exit 0
	fi
	if [ "$SERVICE_COUNT" -lt "$ENTRY_COUNT" ]; then
		echo -e " STATUS: [${YELLOW}PARTIALLY RUNNING${WHITE}]  PROCESS COUNT: [${CYAN}$SERVICE_COUNT${WHITE}/${CYAN}$ENTRY_COUNT${WHITE}]  STARTUP SERVICE: [$STARTUP_STATUS]"
	else
		echo -e " STATUS: [${GREEN}RUNNING${WHITE}]  PROCESS COUNT: [${CYAN}$SERVICE_COUNT${WHITE}/${CYAN}$ENTRY_COUNT${WHITE}]  STARTUP SERVICE: [$STARTUP_STATUS]"
	fi
	## printing running process
	_=$(( INDEX = 1 ))
	for (( i=SERVICE_COUNT; i>0; i--))
	do
		PID=$(ps -ef | grep "$SYNC_SCRIPT_location" | awk "NR==${INDEX}{print \$2}")
		GIT_MAIN_FOLDER_location=$(ps -ef | grep "$SYNC_SCRIPT_location" | awk "NR==${INDEX}{print \$11}")

		echo -e "   [${YELLOW}PID${CYAN}${WHITE} = ${CYAN}$PID${WHITE}]"
		echo -e "     [${GREEN}MONITORING${WHITE}]: $GIT_MAIN_FOLDER_location"
		_=$(( INDEX = INDEX + 1 ))
	done
	## printing terminated processess
	_=$(( AINDEX = 7 ))
	_=$(( PINDEX = 1 ))
	ENTRY_FOUND=()
	for (( i=0; i<ENTRY_COUNT; i++ ))
	do
		ENTRY_FOUND[$i]=0
	done
	_=$(( k = 0 ))
	for (( i=ENTRY_COUNT; i>0; i-- ))
	do
		ENTRY=$(awk "NR==${AINDEX}{print \$4}" "$SERVICES_SCRIPT")
		_=$(( PINDEX = 1 ))
		for (( j=SERVICE_COUNT; j>0; j-- ))
		do
			PROCESS=$(ps -ef | grep "$SYNC_SCRIPT_location" | awk "NR==${PINDEX}{print \$11}")
			if [[ $ENTRY == "$PROCESS" ]]; then
				ENTRY_FOUND[$k]=1
				_=$(( PINDEX = PINDEX + 1 ))
				break
			else
				GIT_FOLDER[$k]=$ENTRY
			fi
			_=$(( PINDEX = PINDEX + 1 ))
		done
		_=$(( AINDEX = AINDEX + 1 ))
		_=$(( k = k + 1 ))
	done
	for (( i=0; i<ENTRY_COUNT; i++ ))
	do
		if [[ ${ENTRY_FOUND[$i]} == 0 ]]; then
			echo -e "   [${RED}TERMINATED${WHITE}] "
			echo -e "     [${GREEN}MONITORING${WHITE}]: ${GIT_FOLDER[$i]}"
		fi
	done
	echo
}

service_start(){
	if [[ ! -f $SERVICES_SCRIPT ]]; then
		echo "${RED}[!]${WHITE} No service(s) available currently to start"
		_EXIT_
	else
		if [[ ! -d "$SCRIPT_LOCATION"/lib/logs ]]; then
			mkdir "$SCRIPT_LOCATION"/lib/logs
		fi

		## Sophisticated check to see which services are running and starting only those which aren't running already
		SERVICE_COUNT=$(ps -ef | grep "$SYNC_SCRIPT_location" | awk '{print $2}' | grep "^" -c)
		echo
		if [[ $SERVICE_COUNT != 1 ]]; then
			## Starting only those services which are not already running
			## Matching with entries in services script
			ENTRY_COUNT=$(grep "$SERVICES_SCRIPT" -ce "-d")
			if [[ $((SERVICE_COUNT - 1)) == "$ENTRY_COUNT" ]]; then
				echo -e " STATUS: [${GREEN}RUNNING${WHITE}]"
			else
				_=$(( AINDEX = 7 ))
				_=$(( PINDEX = 1 ))
				ENTRY_FOUND=()
				for (( i=0; i<ENTRY_COUNT; i++ ))
				do
					ENTRY_FOUND[$i]=0
				done
				_=$(( k = 0 ))
				for (( i=ENTRY_COUNT; i>0; i-- ))
				do
					ENTRY=$(awk "NR==${AINDEX}{print \$4}" "$SERVICES_SCRIPT")
					_=$(( PINDEX = 1 ))
					for (( j=SERVICE_COUNT; j>1; j-- ))
					do
						PROCESS=$(ps -ef | grep "$SYNC_SCRIPT_location" | awk "NR==${PINDEX}{print \$11}")
						if [[ $ENTRY == "$PROCESS" ]]; then
							ENTRY_FOUND[$k]=1
							_=$(( PINDEX = PINDEX + 1 ))
							break
						fi
						_=$(( PINDEX = PINDEX + 1 ))
					done
					_=$(( AINDEX = AINDEX + 1 ))
					_=$(( k = k + 1 ))
				done
				for (( i=0; i<ENTRY_COUNT; i++ ))
				do
					if [[ ${ENTRY_FOUND[$i]} == 0 ]]; then
						START_SERVICE=$(awk "NR==$((7+i)){print}" "$SERVICES_SCRIPT")
						eval "$START_SERVICE"
					fi
				done
				echo " [${GREEN}STARTED${WHITE}] "
			fi
		else
			/bin/bash "$SERVICES_SCRIPT" && echo -e " [${GREEN}STARTED${WHITE}]" || echo -e " [${RED}FAILED TO START${WHITE}]"
		fi
		echo
	fi
}

service_stop(){
	SERVICE_COUNT=$(ps -ef | grep "$SYNC_SCRIPT_location" | awk '{print $2}' | grep "^" -c)
	echo
	for (( i=SERVICE_COUNT; i>1; i-- ))
	do
		PID=$(ps -ef | grep "$SYNC_SCRIPT_location" | awk 'NR==1{print $2}')
		GIT_MAIN_FOLDER_location=$(ps -ef | grep "$SYNC_SCRIPT_location" | awk "NR==1{print \$11}")
		GIT_MAIN_FOLDER="${GIT_MAIN_FOLDER_location##*/}"
		kill "$PID"
		## Appending the termination message into the logs
		echo "[${YELLOW}$(date)${WHITE}] [${RED}KILL${WHITE}] Terminated process runnning on PID=${CYAN}$PID${WHITE}" >> "$SCRIPT_LOCATION"/lib/logs/"$GIT_MAIN_FOLDER".log
	done
	if [[ $SERVICE_COUNT == 1 ]]; then
		echo -e " STATUS: [${RED}NOT RUNNING${WHITE}]"
	else 
		echo -e " [${GREEN}STOPPED${WHITE}]"
	fi
	echo
}

service_restart(){
	service_stop
	service_start
}

service_enable() {
		## implementing logic for executing the services script on every login
		if [[ $KERNEL == "Darwin" ]]; then
			## giving /bin/bash full disk access if not given already
			BINBASH_CHECK=$(sqlite3 /Library/Application\ Support/com.apple.TCC/TCC.db 'select client from access where auth_value and service = "kTCCServiceSystemPolicyAllFiles"' | grep -iq "/bin/bash" && echo 1)
			if [[ $BINBASH_CHECK != 1 ]]; then
				clear
				echo "${RED}[!] ${YELLOW}/bin/bash${CYAN} doesn't have ${YELLOW}Full Disk Access${CYAN} crucial for syncscript to start on login"
				echo "
				${RED}NOTE FROM THE DEVELOPER:${YELLOW}

				Now don't cry for the fact that this script is asking you to do some clicks.. saying it was supposed to be fully automated process.
				I can't help it, to automate the addition of this entry to FDA database via this script user needs to have SIP disabled,
				which is not suggested in general and for those who don't even know what the actual fuck it is, just forget it.

				This is a one time process, you won't be seeing this message again while using this script.. if you follow all the steps given below correctly.
				"
				echo "${GREEN}[+] ${BLUE}Follow the steps below to achieve the above task${WHITE}"

				## printing out required steps (can't automate requires SIP disabled by default)
				echo "
				${YELLOW}1.${WHITE} System Preferences ${CYAN}->${WHITE} Security & Privacy ${CYAN}->${WHITE} Privacy ${CYAN}->${WHITE} Full Disk Access
				${YELLOW}2.${WHITE} Click the '${GREEN}lock${WHITE}' in the lower left corner to allow changes
				${YELLOW}3.${WHITE} Click on '${GREEN}+${WHITE}' button to open finder window
				${YELLOW}4.${WHITE} Go to your ${ORANGE}root directory${WHITE} (named as Macintosh HD)
				${YELLOW}5.${WHITE} Press '${CYAN}Cmd+Shift+.${WHITE}' key combination to show hidden files
				${YELLOW}6.${WHITE} Go to ${ORANGE}bin${WHITE} folder and select ${ORANGE}bash${WHITE} inside it
				${YELLOW}7.${WHITE} Click '${GREEN}open${WHITE}' on the bottom right corner to choose bash
				${YELLOW}8.${WHITE} Close system Preferences.
				"
				read -rp "${CYAN}[^]${BLUE} Enter '${CYAN}proceed${BLUE}' to open System Preferences for you: ${WHITE}" PROCEED
				if [[ $PROCEED != "proceed" ]]; then
					echo "${RED}[!] ${WHITE}User denied to open System Preferences"
					_EXIT_
				else
					open -a "System Preferences"
					read -rp "${CYAN}[^]${BLUE} Enter '${CYAN}done${BLUE}' to proceed to next steps: ${WHITE}" DONE
					if [[ $DONE != "done" ]]; then
						echo "${RED}[!] ${WHITE}User did not complete the addition of ${YELLOW}/bin/bash${WHITE} to ${YELLOW}FDA database${WHITE}"
						_EXIT_
					fi
				fi
			fi

			echo
			if [[ ! -f ~/Library/LaunchAgents/com.gsync-startup.plist ]]; then
				## Method used for starting the startup.sh script on login: LaunchAgent
				cat <<- EOF > ~/Library/LaunchAgents/com.gsync-startup.plist
					<?xml version="1.0" encoding="UTF-8"?>
					<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
					<plist version="1.0">
					<dict>
						<key>KeepAlive</key>
						<dict>
							<key>Crashed</key>
							<true/>
							<key>SuccessfulExit</key>
							<false/>
						</dict>
						<key>Label</key>
						<string>com.gsyn-startup.app</string>
						<key>LimitLoadToSessionType</key>
						<string>Aqua</string>
						<key>ProgramArguments</key>
						<array>
							<string>/bin/bash</string>
							<string>$STARTUP_SCRIPT</string>
						</array>
						<key>RunAtLoad</key>
						<true/>
					</dict>
					</plist>
				EOF
				if [[ $? == 0 ]]; then
					echo -e "  STARTUP SERVICE: [${GREEN}ENABLED${WHITE}]"
				else
					echo -e "  STARTUP SERVICE: [${RED}DISABLED${WHITE}]"
				fi
			else
				echo -e "  STARTUP SERVICE: [${GREEN}ENABLED${WHITE}]"
			fi
			echo
		else
			## Method used for starting the startup.sh script on login: /etc/profile.d
			echo
			if [[ ! -f /etc/profile.d/gsync-startup.sh ]]; then
				cp "$STARTUP_SCRIPT" /etc/profile.d/gsync-startup.sh && echo -e "  STARTUP SERVICE: [${GREEN}ENABLED${WHITE}]" || echo -e "  STARTUP SERVICE: [${RED}DISABLED${WHITE}]"
			else
				echo -e "  STARTUP SERVICE: [${GREEN}ENABLED${WHITE}]"
			fi
			echo
		fi
}

service_disable() {
	echo
	if [[ $KERNEL == "Darwin" ]]; then
		if [[ -f ~/Library/LaunchAgents/com.gsync-startup.plist ]]; then
			rm -f ~/Library/LaunchAgents/com.gsync-startup.plist && echo -e "  STARTUP SERVICE: [${RED}DISABLED${WHITE}]" || echo -e "  STARTUP SERVICE: [${GREEN}ENABLED${WHITE}]"
		else
			echo -e "  STARTUP SERVICE: [${RED}DISABLED${WHITE}]"
		fi
	else
		if [[ -f /etc/parofile.d/gsync-startup.sh ]]; then
			rm -f /etc/profile.d/gsync-startup.sh && echo -e "  STARTUP SERVICE: [${RED}DISABLED${WHITE}]" || echo -e "  STARTUP SERVICE: [${GREEN}ENABLED${WHITE}]"
		else
			echo -e "  STARTUP SERVICE: [${RED}DISABLED${WHITE}]"
		fi
	fi
	echo
}

service_selective_stop() {
	## Matching with entries in services script
	SERVICE_COUNT=$(ps -ef | grep "$SYNC_SCRIPT_location" | awk '{print $2}' | grep "^" -c)
	_=$(( SERVICE_COUNT = SERVICE_COUNT - 1 ))
	ENTRY_COUNT=$(grep "$SERVICES_SCRIPT" -ce "-d")
	echo
	if [[ $SERVICE_COUNT == 0 ]]; then
		echo "${YELLOW}[-] ${WHITE}No process is running for you to stop, control your emotions.."
		_EXIT_
	fi
	echo -e "${GREEN}[+] ${YELLOW}Listing all running processes${WHITE}"
	echo
	_=$(( AINDEX = 7 ))
	_=$(( PINDEX = 1 ))
	ENTRY_FOUND=()
	GIT_FOLDER=()
	## initialising every element of entry_found with 0
	for (( i=0; i<ENTRY_COUNT; i++ ))
	do
		ENTRY_FOUND[$i]=0
	done
	_=$(( k = 0 ))
	for (( i=ENTRY_COUNT; i>0; i-- ))
	do
		ENTRY=$(awk "NR==${AINDEX}{print \$4}" "$SERVICES_SCRIPT")
		_=$(( PINDEX = 1 ))
		for (( j=SERVICE_COUNT; j>0; j-- ))
		do
			PROCESS=$(ps -ef | grep "$SYNC_SCRIPT_location" | awk "NR==${PINDEX}{print \$11}")
			if [[ $ENTRY == "$PROCESS" ]]; then
				ENTRY_FOUND[$k]=1
				GIT_FOLDER[$k]=$ENTRY
				_=$(( k = k + 1 ))
				_=$(( PINDEX = PINDEX + 1 ))
				break
			fi
			_=$(( PINDEX = PINDEX + 1 ))
		done
		_=$(( AINDEX = AINDEX + 1 ))
	done
	_=$(( j = 0 ))
	for (( i=0; i<k; i++ ))
	do
		if [[ ${ENTRY_FOUND[$i]} == 1 ]]; then
			echo -e "    ${CYAN}$((j + 1)))${WHITE} ${GIT_FOLDER[$i]}"
			_=$(( j = j + 1 ))
		fi
	done
	echo 
	echo "${CYAN}0)${WHITE} exit"
	echo
	read -rp "${GREEN}[^]${YELLOW} Enter the number corresponding to the process [${WHITE}use ',' for separate and '-' for contnuous values${YELLOW}]: ${WHITE}" KILL_IT

	echo
	if [[ $KILL_IT == *","* ]] && [[ $KILL_IT != *"-"* ]]; then
		NUMBER="${KILL_IT: -1}"
		if (( NUMBER < SERVICE_COUNT + 1 )) && (( NUMBER > 0 )); then
			PID=$(ps -ef | grep "$SYNC_SCRIPT_location -d ${GIT_FOLDER[$((KILL_IT - 1))]}" | awk "NR==1{print \$2}")
			kill "$PID"
			echo -e "   [${RED}TERMINATED${WHITE}] Process with PID=${CYAN}$PID${WHITE}"
		fi
		KILL_IT="${KILL_IT%?}"
		while [[ $KILL_IT != "" ]]
		do
			KILL_IT="${KILL_IT%?}"
			NUMBER="${KILL_IT: -1}"
			if (( NUMBER < SERVICE_COUNT + 1 )) && (( NUMBER > 0 )); then
				PID=$(ps -ef | grep "$SYNC_SCRIPT_location -d ${GIT_FOLDER[$((KILL_IT - 1))]}" | awk "NR==1{print \$2}")
				kill "$PID"
				echo -e "   [${RED}TERMINATED${WHITE}] Process with PID=${CYAN}$PID${WHITE}"
			fi
			KILL_IT="${KILL_IT%?}"
		done
	elif [[ $KILL_IT == *"-"* ]] && [[ $KILL_IT != *","* ]]; then
		LAST="${KILL_IT: -1}"
		KILL_IT="${KILL_IT%?}"
		FIRST="${KILL_IT%?}"
		if (( LAST < SERVICE_COUNT + 1 )) && (( LAST > 0 )) && (( FIRST < LAST )) && (( FIRST > 0 )); then
			for (( i=FIRST; i<$(( LAST + 1 )) ; i++ ))
			do
				PID=$(ps -ef | grep "$SYNC_SCRIPT_location -d ${GIT_FOLDER[$((i - 1))]}" | awk "NR==1{print \$2}")
				kill "$PID"
				echo -e "   [${RED}TERMINATED${WHITE}] Process with PID=${CYAN}$PID${WHITE}"
			done
		else
			echo "${RED}[!]${WHITE}Are you blind? That's an invalid range of running processes ¯\_(ツ)_/¯"
		fi
	elif [[ $RUN == *"-"* ]] && [[ $RUN == *","* ]]; then
		echo -e "${RED}[!] ${WHITE}Use of both ',' and '-' together is not supported"
		_EXIT_
	else
		if (( KILL_IT > SERVICE_COUNT )) || (( KILL_IT < 0 )); then
			echo
			echo "${RED}[!]${WHITE}Are you blind? There's no process corresponding to this index ¯\_(ツ)_/¯"
			_EXIT_
		elif [[ $KILL_IT == 0 ]]; then
			_EXIT_
		else
			PID=$(ps -ef | grep "$SYNC_SCRIPT_location -d ${GIT_FOLDER[$((KILL_IT - 1))]}" | awk "NR==1{print \$2}")
			kill "$PID"
			echo -e "   [${RED}TERMINATED${WHITE}] Process with PID=${CYAN}$PID${WHITE}"
		fi
	fi
	echo
}

service_selective_start() {
	## Matching with entries in services script
	SERVICE_COUNT=$(ps -ef | grep "$SYNC_SCRIPT_location" | awk '{print $2}' | grep "^" -c)
	_=$(( SERVICE_COUNT = SERVICE_COUNT - 1 ))
	ENTRY_COUNT=$(grep "$SERVICES_SCRIPT" -ce "-d")
	echo
	if [[ $SERVICE_COUNT == $ENTRY_COUNT ]]; then
		echo "${YELLOW}[-] ${WHITE}All processes are running, nothing more for you to start"
		_EXIT_
	fi
	echo -e "${GREEN}[+] ${YELLOW}Listing all stopped processes${WHITE}"
	echo
	_=$(( AINDEX = 7 ))
	_=$(( PINDEX = 1 ))
	ENTRY_FOUND=()
	GIT_FOLDER=()
	## initialising every element of entry_found with 0
	for (( i=0; i<ENTRY_COUNT; i++ ))
	do
		ENTRY_FOUND[$i]=0
	done
	_=$(( k = 0 ))
	for (( i=ENTRY_COUNT; i>0; i-- ))
	do
		ENTRY=$(awk "NR==${AINDEX}{print \$4}" "$SERVICES_SCRIPT")
		_=$(( PINDEX = 1 ))
		for (( j=SERVICE_COUNT; j>0; j-- ))
		do
			PROCESS=$(ps -ef | grep "$SYNC_SCRIPT_location" | awk "NR==${PINDEX}{print \$11}")
			if [[ $ENTRY == "$PROCESS" ]]; then
				_=$(( PINDEX = PINDEX + 1 ))
				ENTRY_FOUND[$k]=1
				break
			else
				if [[ $ENTRY != ${GIT_FOLDER[$k]} ]]; then
					GIT_FOLDER[$k]=$ENTRY
					_=$(( k = k + 1 ))
				fi
			fi
			_=$(( PINDEX = PINDEX + 1 ))
		done
		_=$(( AINDEX = AINDEX + 1 ))
	done
	_=$(( j = 0 ))
	for (( i=0; i<k; i++ ))
	do
		if [[ ${ENTRY_FOUND[$i]} == 0 ]]; then
			echo -e "    ${CYAN}$((j + 1)))${WHITE} ${GIT_FOLDER[$i]}"
			_=$(( j = j + 1 ))
		fi
	done
	echo 
	echo "${CYAN}0)${WHITE} exit"
	echo
	read -rp "${GREEN}[^]${YELLOW} Enter the number corresponding to the process [${WHITE}use ',' for separate and '-' for contnuous values${YELLOW}]: ${WHITE}" RUN

	STOPPED_COUNT=$(( ENTRY_COUNT - SERVICE_COUNT ))
	echo
	if [[ $RUN == *","* ]] && [[ $RUN != *"-"* ]]; then
		NUMBER="${RUN: -1}"
		if (( NUMBER < STOPPED_COUNT + 1 )) && (( NUMBER > 0 )); then
			FOLDER_NAME=${GIT_FOLDER[$(( RUN - 1 ))]##*/}
			nohup "$SYNC_SCRIPT_location" -d "${GIT_FOLDER[$(( RUN - 1 ))]}" > "$SCRIPT_LOCATION"/lib/logs/"$FOLDER_NAME".log &
			echo -e "   [${GREEN}STARTED${WHITE}] Sync process for ${CYAN}${GIT_FOLDER[$(( RUN - 1 ))]}${WHITE}"
		fi
		RUN="${RUN%?}"
		while [[ $RUN != "" ]]
		do
			RUN="${RUN%?}"
			NUMBER="${RUN: -1}"
			if (( NUMBER < STOPPED_COUNT + 1 )) && (( NUMBER > 0 )); then
				FOLDER_NAME=${GIT_FOLDER[$(( RUN - 1 ))]##*/}
				nohup "$SYNC_SCRIPT_location" -d "${GIT_FOLDER[$(( RUN - 1 ))]}" > "$SCRIPT_LOCATION"/lib/logs/"$FOLDER_NAME".log &
				echo -e "   [${GREEN}STARTED${WHITE}] Sync process for ${CYAN}${GIT_FOLDER[$(( RUN - 1 ))]}${WHITE}"
			fi
			RUN="${RUN%?}"
		done
	elif [[ $RUN == *"-"* ]] && [[ $RUN != *","* ]]; then
		LAST="${RUN: -1}"
		RUN="${RUN%?}"
		FIRST="${RUN%?}"
		if (( LAST < STOPPED_COUNT + 1 )) && (( LAST > 0 )) && (( FIRST < LAST )) && (( FIRST > 0 )); then
			for (( i=FIRST; i<$(( LAST + 1 )) ; i++ ))
			do
				FOLDER_NAME=${GIT_FOLDER[$(( i - 1 ))]##*/}
				nohup "$SYNC_SCRIPT_location" -d "${GIT_FOLDER[$(( i - 1 ))]}" > "$SCRIPT_LOCATION"/lib/logs/"$FOLDER_NAME".log &
				echo -e "   [${GREEN}STARTED${WHITE}] Sync process for ${CYAN}${GIT_FOLDER[$(( i - 1 ))]}${WHITE}"
			done
		else
			echo "${RED}[!]${WHITE}Are you blind? That's an invalid range of stopped processes ¯\_(ツ)_/¯"
		fi
	elif [[ $RUN == *"-"* ]] && [[ $RUN == *","* ]]; then
		echo -e "${RED}[!] ${WHITE}Use of both ',' and '-' together is not supported"
		_EXIT_
	else
		if (( RUN > STOPPED_COUNT )) || (( RUN < 0 )); then
			echo "${RED}[!]${WHITE}Are you blind? There's no process corresponding to this index ¯\_(ツ)_/¯"
			_EXIT_
		elif [[ $RUN == 0 ]]; then
			_EXIT_
		else
			FOLDER_NAME=${GIT_FOLDER[$(( RUN - 1 ))]##*/}
			nohup "$SYNC_SCRIPT_location" -d "${GIT_FOLDER[$(( RUN - 1 ))]}" > "$SCRIPT_LOCATION"/lib/logs/"$FOLDER_NAME".log &
			echo -e "   [${GREEN}STARTED${WHITE}] Sync process for ${CYAN}${GIT_FOLDER[$(( RUN - 1 ))]}${WHITE}"
		fi
	fi
	echo
}
#</start>
