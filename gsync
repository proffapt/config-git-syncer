#!/bin/bash

###############################################################################################################
#                                          gsync - (Github sync configurer)                                   #
#  Automate the unique process(by proffapt) for syncing your config files from your local machine to github.  #
#                                                                                                             #
#         Author: Arpit Bhardwaj(proffapt)                                                                    #
#         Twitter: @proffapt                                                                                  #
#         Github: proffapt                                                                                    #
#         Gitlab: proffapt                                                                                    #
#         Telegram: @proffapt                                                                                 #
#         Email: proffapt@protonmail.com                                                                      #
#         Facebook: I Don't Want My Data To Be Available On DarkWeb lol                                       #
#                                                                                                             #
#                  License: BSD License 2.0                                                                   #
#                  Note: If You find any bugs in gsync, please REPORT it to me                                #
#                  by creating an Issue; Or if you have a fix, create a Pull Request.                         #
#                                                                                                             #
###############################################################################################################

## Sourcing other script files
# <start>
SCRIPT_LOCATION=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)

source "$SCRIPT_LOCATION/lib/func_and_vars/colors_banner_usage"    # contains color, banner(var+func) and usage variable
source "$SCRIPT_LOCATION/lib/func_and_vars/handler_functions"      # contains error and normal messages
source "$SCRIPT_LOCATION/lib/func_and_vars/create_mode_functions"  # everything used inside create mode
source "$SCRIPT_LOCATION/lib/func_and_vars/delete_mode_functions"  # everything used inside delete mode
source "$SCRIPT_LOCATION/lib/func_and_vars/default_mode_functions" # everything used inside default mode
source "$SCRIPT_LOCATION/lib/func_and_vars/vars_functions"  	   # contains shellcheck and manipulate_and_store_variables function
# </start>

while [ $OPTIND -le "$#" ]; do
	if getopts c:g:h input; then
		case "${input}" in

		c) CONFIG_FILE_location=${OPTARG} ;;
		g) GIT_MAIN_FOLDER_location=${OPTARG} ;;
		h) echo "${USAGE}" && exit 0 ;;
		*)
			banner
			echo -e "${RED}ERROR${WHITE}: Invalid option given: -'${ORANGE}$input${WHITE}'"
			_EXIT_
			;;
		esac
	else
		script_args+=("${!OPTIND}")
		((OPTIND++))
	fi
done

## Calling utility functions
## These are stored in checks_vars_functions file under /lib/functions
# <start>
manipulate_and_store_variables
shellcheck
# </start>

## Creating the syncing files logic :
if [[ "$MODE" == "create" ]]; then
	banner

	## Configuration file creation condition
	fav_text_editor
	create_config_file

	## Local Github folder creation condition
	create_git_folder

	## Checking if git folder is git initialised.. if not.. initialising it
	initialise_git

	## Readme file creation condition
	create_readme

	## Moving config file to git folder
	move_config_to_git_folder

	## Creating link to config file in original location
	create_link_to_config

	## Just making sure syncscript is executable
	chmod +x "$SYNC_SCRIPT_location"

	## Syncing the configuration file added in it's git folder using just created sync scripts..
	configure_syncscript

## Creating the logic for undoing the mess the script made with create mode:
elif [[ "$MODE" == "delete" ]]; then
	banner

	## Removing link
	delete_link

	## Placing original configuration file to where it belongs
	put_back_config_file

	## Handling the config file in git folder and remote repo
	delete_git_folder_and_repo

	## Undoing any method used to make the scynscript run at login
	deconfigure_syncsript

## Logic for storing default values
elif [[ "$MODE" == "default" ]]; then
	banner

	## ignore any other argument than -g for setting up default value
	ignore_args_other_than_g

	## storing the default value
	setup_default_options

## The fuck you saying?
else
	banner

	echo -e "${RED}ERROR${WHITE}: Invalid mode selected - '${ORANGE}$MODE${WHITE}'"
	_EXIT_
fi
